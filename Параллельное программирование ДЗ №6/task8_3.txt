#include <iostream>
#include <math.h>
#include "mpi.h"

int main(int argc, char *argv[]){
    srand(time(NULL));
    int const n = 10;
    int a[n][n], b[n][n];
    int ProcRank, ProcNum, message_size;
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);
    MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);

    if (ProcRank == 0){
        printf("A: \n");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                a[i][j] = rand() % 10 + 1;
                printf("%d ", a[i][j]);
            }
            printf("\n");
        }

        printf("B: \n");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                b[i][j] = rand() % 10 + 1;
                printf("%d ", b[i][j]);
            }
            printf("\n");
        }

        int iterator = 0;
        int send_a[n], send_b[n];

        for (int i = 1; i < ProcNum; i++){
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    send_a[iterator] = a[k][j];
                    send_b[iterator] = b[k][j];
                    iterator++;
                }
                MPI_Send(send_a, n, MPI_INT, i, 1, MPI_COMM_WORLD);
                MPI_Send(send_b, n, MPI_INT, i, 2, MPI_COMM_WORLD);
                iterator = 0;
            }

        }
    }
    if (ProcRank != 0){
        MPI_Probe(0, 1, MPI_COMM_WORLD, &status);
        MPI_Get_count(&status, MPI_INT, &message_size);
        int* received_a = (int*)malloc(sizeof(int) * message_size);
        int* received_b = (int*)malloc(sizeof(int) * message_size);
        MPI_Recv(received_a, message_size, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);
        MPI_Recv(received_b, message_size, MPI_INT, 0, 2, MPI_COMM_WORLD, &status);

        int result_a[message_size];
        int result_b[message_size];

        for (int i = 0; i < message_size; i++){
            result_a[i] = received_a[i];
            result_b[i] = received_b[i];
        }
        MPI_Send(result_a, message_size, MPI_INT, 0, 3, MPI_COMM_WORLD);
        MPI_Send(result_b, message_size, MPI_INT, 0, 4, MPI_COMM_WORLD);
    }
    if (ProcRank == 0){
        int result_a[n][n];
        int result_b[n][n];
        MPI_Probe(MPI_ANY_SOURCE, 3, MPI_COMM_WORLD, &status);
        MPI_Get_count(&status, MPI_INT, &message_size);
        int * received_a = (int*)malloc(sizeof(int) * message_size);
        int * received_b = (int*)malloc(sizeof(int) * message_size);

        int stroka = 0;
        int iterator = 0;

        for (int i = 1; i < ProcNum; i++){
            MPI_Recv(received_a, message_size, MPI_INT, i, 3, MPI_COMM_WORLD, &status);
            MPI_Recv(received_b, message_size, MPI_INT, i, 4, MPI_COMM_WORLD, &status);
            for (int k = 0; k < n; ++k) {
                result_a[stroka][k] = received_a[iterator];
                result_b[stroka][k] = received_b[iterator];
                iterator++;
            }
            stroka++;
            iterator = 0;
        }

        printf("Transposed matrix A: \n");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                printf("%d ", a[j][i]);
            }
            printf("\n");
        }
        printf("Transposed matrix B: \n");
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                printf("%d ", b[j][i]);
            }
            printf("\n");
        }
    }

    MPI_Finalize();
}