#include <cstdio>
#include <math.h>
#include "mpi.h"

int main(int argc, char **argv) {
    const int N = 10;
    int a[N][N], b[N][N], c[N][N];
    int ProcNum, ProcRank, rows, offset;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);
    MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);
    MPI_Status status;

    if (ProcRank == 0) {

        printf("A: \n");
        for (int i = 0; i < N; i++){
            for (int j = 0; j < N; j++){
                a[i][j] = rand() % 10 + 1;
                printf("%d ", a[i][j]);
            }
            printf("\n");
        }

        printf("B: \n");
        for (int i = 0; i < N; i++){
            for (int j = 0; j < N; j++){
                b[i][j] = rand() % 10 + 1;
                printf("%d ", b[i][j]);
            }
            printf("\n");
        }


        rows = N / (ProcNum - 1);
        offset = 0;

        for (int i = 1; i <= ProcNum - 1; i++) {
            MPI_Send(&offset, 1, MPI_INT, i, 1, MPI_COMM_WORLD);
            MPI_Send(&rows, 1, MPI_INT, i, 1, MPI_COMM_WORLD);
            MPI_Send(&a[offset][0], rows * N, MPI_INT, i, 1, MPI_COMM_WORLD);
            MPI_Send(&b, N * N, MPI_INT, i, 1, MPI_COMM_WORLD);
            offset = offset + rows;
        }

        for (int i = 1; i <= ProcNum - 1; i++) {
            MPI_Recv(&offset, 1, MPI_INT, i, 2, MPI_COMM_WORLD, &status);
            MPI_Recv(&rows, 1, MPI_INT, i, 2, MPI_COMM_WORLD, &status);
            MPI_Recv(&c[offset][0], rows * N, MPI_INT, i, 2, MPI_COMM_WORLD, &status);
        }

        printf("Result matrix:\n");
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                printf("%d ", c[i][j]);
            printf("\n");
        }

    }

    if (ProcRank != 0) {
        MPI_Recv(&offset, 1, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);
        MPI_Recv(&rows, 1, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);
        MPI_Recv(&a, rows * N, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);
        MPI_Recv(&b, N * N, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);

        for (int k = 0; k < N; k++)
            for (int i = 0; i < rows; i++) {
                c[i][k] = 0;
                for (int j = 0; j < N; j++) {
                    c[i][k] = c[i][k] + a[i][j] * b[j][k];
                }
            }

        MPI_Send(&offset, 1, MPI_INT, 0, 2, MPI_COMM_WORLD);
        MPI_Send(&rows, 1, MPI_INT, 0, 2, MPI_COMM_WORLD);
        MPI_Send(&c, rows * N, MPI_INT, 0, 2, MPI_COMM_WORLD);
    }

    MPI_Finalize();
}

