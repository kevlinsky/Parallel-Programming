#include <stdio.h>
#include <omp.h>
#include <cstdlib>
#include <ctime>

#define ROWS 4
#define COLUMNS 5
#define THREADS 4

#define TIME_TEST_ROWS 8000
#define TIME_TEST_COLUMNS 10000

int* multiplyMatrixByVector(int**, int*, int, int, bool);
int** create2DArray(int, int);
void fillRandom2DArray(int**, int, int, int);
void fillRandomArray(int*, int, int);

int main(){
    srand(time(NULL));
    int** matrix = create2DArray(ROWS, COLUMNS);
    fillRandom2DArray(matrix, ROWS, COLUMNS, 10);

    int* vector = new int[COLUMNS];
    fillRandomArray(vector, COLUMNS, 10);

    printf("Matrix:\n");
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    printf("\nVector:\n");
    for (int i = 0; i < COLUMNS; i++) {
        printf("%d ", vector[i]);
    }

    int* result = multiplyMatrixByVector(matrix, vector, ROWS, COLUMNS, true);
    printf("\n\nResult:\n");
    for (int i = 0; i < ROWS; i++) {
        printf("%d ", result[i]);
    }

    //TIME TEST
    printf("\n\nTIME TEST\n");
    double parTime = 0;
    double notParTime = 0;

    int** bigMatrix = create2DArray(TIME_TEST_ROWS, TIME_TEST_COLUMNS);
    fillRandom2DArray(bigMatrix, TIME_TEST_ROWS, TIME_TEST_COLUMNS, 10);

    int* bigVector = new int[TIME_TEST_COLUMNS];
    fillRandomArray(bigVector, TIME_TEST_COLUMNS, 10);

    parTime = omp_get_wtime();
    multiplyMatrixByVector(bigMatrix, bigVector, TIME_TEST_ROWS, TIME_TEST_COLUMNS, true);
    parTime = omp_get_wtime() - parTime;

    notParTime = clock();
    multiplyMatrixByVector(bigMatrix, bigVector, TIME_TEST_ROWS, TIME_TEST_COLUMNS, false);
    notParTime = (clock() - notParTime) / CLOCKS_PER_SEC;

    printf("Not parallel time: %f\n", notParTime);
    printf("Parallel time: %f\n", parTime);
}

int* multiplyMatrixByVector(int** matrix, int* vector, int rows, int columns, bool isParallel){
    int* a = new int[rows];
    for (int i = 0; i < rows; i++) {
        a[i] = 0;
    }

    omp_set_dynamic(0);
    omp_set_num_threads(THREADS);

#pragma omp parallel for if (isParallel)
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            a[i] += matrix[i][j] * vector[j];
        }
    }

    return a;
}

int** create2DArray(int rows, int columns) {
    int** matrix = new int* [rows];
    for (int i = 0; i < rows; i++) {
        matrix[i] = new int[columns];
    }
    return matrix;
}

void fillRandom2DArray(int** array, int rows, int columns, int max) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            array[i][j] = rand() % max;
        }
    }

}

void fillRandomArray(int* array, int size, int max) {
    for (int i = 0; i < size; i++) {
        array[i] = rand() % max;
    }
}