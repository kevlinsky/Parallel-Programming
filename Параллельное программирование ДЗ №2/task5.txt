#include <omp.h>
#include <cstdio>
#include <cstdlib>

int main(){
    int d[6][8];
    for (int i = 0; i < 6; ++i) {
        for (int j = 0; j < 8; ++j) {
            d[i][j] = rand() % 10;
            printf("%d ", d[i][j]);
        }
        printf("\n");
    }
#pragma omp parallel sections num_threads(3)
    {
#pragma omp section
        {
            int sum = 0;
            for (int i = 0; i < 6; ++i) {
                for (int j = 0; j < 8; ++j) {
                    sum += d[i][j];
                }
            }
            printf("Thread %d  of  %d - Average: %f\n", omp_get_thread_num() + 1, omp_get_num_threads(), (float) sum / (6 * 8));
        }
#pragma omp section
        {
            int max = 0;
            int min = 10;
            for (int i = 0; i < 6; ++i) {
                for (int j = 0; j < 8; ++j) {
                    if (d[i][j] < min){
                        min = d[i][j];
                    }
                    if (d[i][j] > max){
                        max = d[i][j];
                    }
                }
            }
            printf("Thread %d  of  %d - Max: %d\n", omp_get_thread_num() + 1, omp_get_num_threads(), max);
            printf("Thread %d  of  %d - Min: %d\n", omp_get_thread_num() + 1, omp_get_num_threads(), min);
        }
#pragma omp section
        {
            int count = 0;
            for (int i = 0; i < 6; ++i) {
                for (int j = 0; j < 8; ++j) {
                    if (d[i][j] % 3 == 0){
                        count++;
                    }
                }
            }
            printf("Thread %d  of  %d - Count of elements that are multiples of three: %d\n", omp_get_thread_num() + 1, omp_get_num_threads(), count);
        }
    }
    return 0;
}