#include <iostream>
#include <math.h>
#include "mpi.h"

int main(int argc, char *argv[]){
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    const int n = 10;

    int arrayA[n][n];
    int arrayB[n][n];
    for (int i = 0; i < n; i++){
        for (int j = 0; j < n; j++) {
            arrayA[i][j] = (rand() % 1000) - 500;
        }
        for (int j = 0; j < n; j++) {
            arrayB[i][j] = (rand() % 1000) - 500;
        }
    }

    int getbufA[n];
    int getbufB[n];

    int arrayC[n][n];
    int bufC[n];

    MPI_Scatter(arrayA, n, MPI_INT, &getbufA, n, MPI_INT, 0, MPI_COMM_WORLD);
    MPI_Scatter(arrayB, n, MPI_INT, &getbufB, n, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < n; i++) {
        bufC[i] = getbufA[i] * getbufB[i];
    }

    MPI_Gather(bufC, n, MPI_INT, arrayC, n, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("MATRIX C \n");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                printf("%d ", arrayC[i][j]);
            }
            printf("\n");
        }
    }

    MPI_Finalize();
}