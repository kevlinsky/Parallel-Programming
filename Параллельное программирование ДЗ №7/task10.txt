#include <iostream>
#include <math.h>
#include "mpi.h"

int main(int argc, char *argv[]){
    MPI_Init(&argc, &argv);
    int rank, size;
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    int partSize = 0;
    int localsum = 0;
    int globalsum = 0;
    const int n = 30;

    partSize = n / size;
    int* sendbuf = new int[n];
    int* getbuf = new int[partSize];

    for (int i = 0; i < 30; i++) {
        sendbuf[i] = (rand() % 1000) - 500;
    }

    MPI_Scatter(sendbuf, partSize, MPI_INT, getbuf, partSize, MPI_INT, 0, MPI_COMM_WORLD);

    for (int i = 0; i < partSize; i++) {
        localsum += abs(getbuf[i]);
    }

    printf("localsum = %d \n", localsum);

    MPI_Reduce(&localsum, &globalsum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("global sum = %d \n", globalsum);
    }

    MPI_Finalize();

    return 0;
}