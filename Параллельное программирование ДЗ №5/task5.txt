#include<mpi.h>
#include<iostream>

int main(int argc, char *argv[]){
    const int NUM = 12;
    int a[NUM];

    int ProcNum, ProcRank;

    MPI_Init(&argc, &argv);
    MPI_Status status;
    MPI_Comm_size(MPI_COMM_WORLD, &ProcNum);
    MPI_Comm_rank(MPI_COMM_WORLD, &ProcRank);

    if (ProcRank == 0){
        printf("a[12] = ");
        for (int i = 0; i < NUM; ++i) {
            a[i] = rand() % 100 + 1;
            printf("%d ", a[i]);
        }
        printf("\n");

        int block = 12 / ProcNum + 1;
        int elements = 12 - block;

        for (int i = 1; i < ProcNum; i++){
            if (elements > 0 && elements < block) block = elements;

            MPI_Send(&a[(12 / ProcNum + 1) * i], elements > 0 ? block : 0, MPI_INT, i, 13, MPI_COMM_WORLD);

            elements = elements - block;
        }
        printf("Process 1: ");

        block = 12 / ProcNum + 1;

        for (int i = 0; i < block; i++){
            printf("%d ", a[i]);
        }
        printf("\n");
    } else {
        MPI_Probe(0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        int count;

        MPI_Get_count(&status, MPI_INT, &count);
        int b[count];

        MPI_Recv(b, count, MPI_INT, 0, MPI_ANY_TAG, MPI_COMM_WORLD, &status);
        printf("Process %d: ", ProcRank + 1);
        for (int i = 0; i < count; i++){
            printf("%d ", b[i]);
        }
        printf("\n");
    }
    MPI_Finalize();
}